/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IoK8sApiFlowcontrolV1beta2FlowSchema,
  IoK8sApiFlowcontrolV1beta2FlowSchemaList,
  IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration,
  IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationList,
  IoK8sApimachineryPkgApisMetaV1APIResourceList,
  IoK8sApimachineryPkgApisMetaV1DeleteOptions,
  IoK8sApimachineryPkgApisMetaV1Status,
  IoK8sApimachineryPkgApisMetaV1WatchEvent,
} from '../models/index';
import {
    IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON,
    IoK8sApiFlowcontrolV1beta2FlowSchemaToJSON,
    IoK8sApiFlowcontrolV1beta2FlowSchemaListFromJSON,
    IoK8sApiFlowcontrolV1beta2FlowSchemaListToJSON,
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON,
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationToJSON,
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationListFromJSON,
    IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationListToJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON,
    IoK8sApimachineryPkgApisMetaV1APIResourceListToJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsFromJSON,
    IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON,
    IoK8sApimachineryPkgApisMetaV1StatusFromJSON,
    IoK8sApimachineryPkgApisMetaV1StatusToJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON,
    IoK8sApimachineryPkgApisMetaV1WatchEventToJSON,
} from '../models/index';

export interface CreateFlowcontrolApiserverV1beta2FlowSchemaRequest {
    body: IoK8sApiFlowcontrolV1beta2FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    body: IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteFlowcontrolApiserverV1beta2FlowSchemaRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: IoK8sApimachineryPkgApisMetaV1DeleteOptions;
}

export interface ListFlowcontrolApiserverV1beta2FlowSchemaRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchFlowcontrolApiserverV1beta2FlowSchemaRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchFlowcontrolApiserverV1beta2FlowSchemaStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
}

export interface ReadFlowcontrolApiserverV1beta2FlowSchemaRequest {
    name: string;
    pretty?: string;
}

export interface ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
}

export interface ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceFlowcontrolApiserverV1beta2FlowSchemaRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1beta2FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1beta2FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest {
    name: string;
    body: IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
}

export interface WatchFlowcontrolApiserverV1beta2FlowSchemaRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchFlowcontrolApiserverV1beta2FlowSchemaListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest {
    name: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest {
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
}

/**
 * 
 */
export class FlowcontrolApiserverV1beta2Api extends runtime.BaseAPI {

    /**
     * create a FlowSchema
     */
    async createFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters: CreateFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchema>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createFlowcontrolApiserverV1beta2FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1beta2FlowSchemaToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON(jsonValue));
    }

    /**
     * create a FlowSchema
     */
    async createFlowcontrolApiserverV1beta2FlowSchema(requestParameters: CreateFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchema> {
        const response = await this.createFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters: CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createFlowcontrolApiserverV1beta2PriorityLevelConfiguration(requestParameters: CreateFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration> {
        const response = await this.createFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRaw(requestParameters: DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteFlowcontrolApiserverV1beta2CollectionFlowSchema(requestParameters: DeleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1beta2CollectionFlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRaw(requestParameters: DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration(requestParameters: DeleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters: DeleteFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteFlowcontrolApiserverV1beta2FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowcontrolApiserverV1beta2FlowSchema(requestParameters: DeleteFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters: DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApimachineryPkgApisMetaV1DeleteOptionsToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1StatusFromJSON(jsonValue));
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration(requestParameters: DeleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1Status> {
        const response = await this.deleteFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getFlowcontrolApiserverV1beta2APIResourcesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1APIResourceList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getFlowcontrolApiserverV1beta2APIResources(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1APIResourceList> {
        const response = await this.getFlowcontrolApiserverV1beta2APIResourcesRaw(initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters: ListFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchemaList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowcontrolApiserverV1beta2FlowSchema(requestParameters: ListFlowcontrolApiserverV1beta2FlowSchemaRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchemaList> {
        const response = await this.listFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters: ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationList>> {
        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listFlowcontrolApiserverV1beta2PriorityLevelConfiguration(requestParameters: ListFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationList> {
        const response = await this.listFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters: PatchFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1beta2FlowSchema.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1beta2FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1beta2FlowSchema(requestParameters: PatchFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchema> {
        const response = await this.patchFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1beta2FlowSchemaStatusRaw(requestParameters: PatchFlowcontrolApiserverV1beta2FlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1beta2FlowSchemaStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1beta2FlowSchemaStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowcontrolApiserverV1beta2FlowSchemaStatus(requestParameters: PatchFlowcontrolApiserverV1beta2FlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchema> {
        const response = await this.patchFlowcontrolApiserverV1beta2FlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters: PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration(requestParameters: PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration> {
        const response = await this.patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRaw(requestParameters: PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus(requestParameters: PatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration> {
        const response = await this.patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters: ReadFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1beta2FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowcontrolApiserverV1beta2FlowSchema(requestParameters: ReadFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchema> {
        const response = await this.readFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowcontrolApiserverV1beta2FlowSchemaStatusRaw(requestParameters: ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1beta2FlowSchemaStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowcontrolApiserverV1beta2FlowSchemaStatus(requestParameters: ReadFlowcontrolApiserverV1beta2FlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchema> {
        const response = await this.readFlowcontrolApiserverV1beta2FlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1beta2PriorityLevelConfiguration(requestParameters: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration> {
        const response = await this.readFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRaw(requestParameters: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus(requestParameters: ReadFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration> {
        const response = await this.readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters: ReplaceFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1beta2FlowSchema.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1beta2FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1beta2FlowSchemaToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1beta2FlowSchema(requestParameters: ReplaceFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchema> {
        const response = await this.replaceFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1beta2FlowSchemaStatusRaw(requestParameters: ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1beta2FlowSchemaStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1beta2FlowSchemaStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1beta2FlowSchemaToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowcontrolApiserverV1beta2FlowSchemaStatus(requestParameters: ReplaceFlowcontrolApiserverV1beta2FlowSchemaStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2FlowSchema> {
        const response = await this.replaceFlowcontrolApiserverV1beta2FlowSchemaStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters: ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration(requestParameters: ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration> {
        const response = await this.replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRaw(requestParameters: ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.fieldValidation !== undefined) {
            queryParameters['fieldValidation'] = requestParameters.fieldValidation;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApiFlowcontrolV1beta2PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus(requestParameters: ReplaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApiFlowcontrolV1beta2PriorityLevelConfiguration> {
        const response = await this.replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters: WatchFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchFlowcontrolApiserverV1beta2FlowSchema.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1beta2FlowSchema(requestParameters: WatchFlowcontrolApiserverV1beta2FlowSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1beta2FlowSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1beta2FlowSchemaListRaw(requestParameters: WatchFlowcontrolApiserverV1beta2FlowSchemaListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of FlowSchema. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1beta2FlowSchemaList(requestParameters: WatchFlowcontrolApiserverV1beta2FlowSchemaListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1beta2FlowSchemaListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters: WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration.');
        }

        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch changes to an object of kind PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead, filtered to a single item with the \'fieldSelector\' parameter.
     */
    async watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration(requestParameters: WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRaw(requestParameters: WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IoK8sApimachineryPkgApisMetaV1WatchEvent>> {
        const queryParameters: any = {};

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.resourceVersionMatch !== undefined) {
            queryParameters['resourceVersionMatch'] = requestParameters.resourceVersionMatch;
        }

        if (requestParameters.sendInitialEvents !== undefined) {
            queryParameters['sendInitialEvents'] = requestParameters.sendInitialEvents;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IoK8sApimachineryPkgApisMetaV1WatchEventFromJSON(jsonValue));
    }

    /**
     * watch individual changes to a list of PriorityLevelConfiguration. deprecated: use the \'watch\' parameter with a list operation instead.
     */
    async watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList(requestParameters: WatchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IoK8sApimachineryPkgApisMetaV1WatchEvent> {
        const response = await this.watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
