/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.28.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IoK8sApiCoreV1PersistentVolumeClaimCondition } from './IoK8sApiCoreV1PersistentVolumeClaimCondition';
import {
    IoK8sApiCoreV1PersistentVolumeClaimConditionFromJSON,
    IoK8sApiCoreV1PersistentVolumeClaimConditionFromJSONTyped,
    IoK8sApiCoreV1PersistentVolumeClaimConditionToJSON,
} from './IoK8sApiCoreV1PersistentVolumeClaimCondition';

/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 * @export
 * @interface IoK8sApiCoreV1PersistentVolumeClaimStatus
 */
export interface IoK8sApiCoreV1PersistentVolumeClaimStatus {
    /**
     * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * @type {Array<string>}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    accessModes?: Array<string>;
    /**
     * allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:
     * 	* Un-prefixed keys:
     * 		- storage - the capacity of the volume.
     * 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
     * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
     * 
     * ClaimResourceStatus can be in any of following states:
     * 	- ControllerResizeInProgress:
     * 		State set when resize controller starts resizing the volume in control-plane.
     * 	- ControllerResizeFailed:
     * 		State set when resize has failed in resize controller with a terminal error.
     * 	- NodeResizePending:
     * 		State set when resize controller has finished resizing the volume but further resizing of
     * 		volume is needed on the node.
     * 	- NodeResizeInProgress:
     * 		State set when kubelet starts resizing the volume.
     * 	- NodeResizeFailed:
     * 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
     * 		NodeResizeFailed.
     * For example: if expanding a PVC for more capacity - this field can be one of the following states:
     * 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
     *      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
     *      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
     * When this field is not set, it means that no resize operation is in progress for the given PVC.
     * 
     * A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
     * 
     * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    allocatedResourceStatuses?: { [key: string]: string; };
    /**
     * allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:
     * 	* Un-prefixed keys:
     * 		- storage - the capacity of the volume.
     * 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
     * Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.
     * 
     * Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.
     * 
     * A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.
     * 
     * This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    allocatedResources?: { [key: string]: string; };
    /**
     * capacity represents the actual resources of the underlying volume.
     * @type {{ [key: string]: string; }}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    capacity?: { [key: string]: string; };
    /**
     * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
     * @type {Array<IoK8sApiCoreV1PersistentVolumeClaimCondition>}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    conditions?: Array<IoK8sApiCoreV1PersistentVolumeClaimCondition>;
    /**
     * phase represents the current phase of PersistentVolumeClaim.
     * 
     * Possible enum values:
     *  - `"Bound"` used for PersistentVolumeClaims that are bound
     *  - `"Lost"` used for PersistentVolumeClaims that lost their underlying PersistentVolume. The claim was bound to a PersistentVolume and this volume does not exist any longer and all data on it was lost.
     *  - `"Pending"` used for PersistentVolumeClaims that are not yet bound
     * @type {string}
     * @memberof IoK8sApiCoreV1PersistentVolumeClaimStatus
     */
    phase?: IoK8sApiCoreV1PersistentVolumeClaimStatusPhaseEnum;
}


/**
 * @export
 */
export const IoK8sApiCoreV1PersistentVolumeClaimStatusPhaseEnum = {
    Bound: 'Bound',
    Lost: 'Lost',
    Pending: 'Pending'
} as const;
export type IoK8sApiCoreV1PersistentVolumeClaimStatusPhaseEnum = typeof IoK8sApiCoreV1PersistentVolumeClaimStatusPhaseEnum[keyof typeof IoK8sApiCoreV1PersistentVolumeClaimStatusPhaseEnum];


/**
 * Check if a given object implements the IoK8sApiCoreV1PersistentVolumeClaimStatus interface.
 */
export function instanceOfIoK8sApiCoreV1PersistentVolumeClaimStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IoK8sApiCoreV1PersistentVolumeClaimStatusFromJSON(json: any): IoK8sApiCoreV1PersistentVolumeClaimStatus {
    return IoK8sApiCoreV1PersistentVolumeClaimStatusFromJSONTyped(json, false);
}

export function IoK8sApiCoreV1PersistentVolumeClaimStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): IoK8sApiCoreV1PersistentVolumeClaimStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessModes': !exists(json, 'accessModes') ? undefined : json['accessModes'],
        'allocatedResourceStatuses': !exists(json, 'allocatedResourceStatuses') ? undefined : json['allocatedResourceStatuses'],
        'allocatedResources': !exists(json, 'allocatedResources') ? undefined : json['allocatedResources'],
        'capacity': !exists(json, 'capacity') ? undefined : json['capacity'],
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(IoK8sApiCoreV1PersistentVolumeClaimConditionFromJSON)),
        'phase': !exists(json, 'phase') ? undefined : json['phase'],
    };
}

export function IoK8sApiCoreV1PersistentVolumeClaimStatusToJSON(value?: IoK8sApiCoreV1PersistentVolumeClaimStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessModes': value.accessModes,
        'allocatedResourceStatuses': value.allocatedResourceStatuses,
        'allocatedResources': value.allocatedResources,
        'capacity': value.capacity,
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(IoK8sApiCoreV1PersistentVolumeClaimConditionToJSON)),
        'phase': value.phase,
    };
}

